package database;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.dbutils.DbUtils;
import org.apache.commons.dbutils.ResultSetHandler;
import org.hsqldb.server.Server;

import utilities.DateTimeUtility;
import utilities.DiscTask;

public class SQLModel {
	Server sqlServer;
	
	String dbAlias = "taskdb";
	ResultSetHandler<List<String>> getStringResultHandler = (rs) -> {
		List<String> result = new ArrayList<String>();
		while(rs.next()) {
			result.add(rs.getString(1));
		}
		return result;
	};
	
	public SQLModel() {
		init();
	}
	
	public void restartConnection() { 
		init();
	}
	
	private void init() { 
		sqlServer = new Server();
		sqlServer.setDatabaseName(0, dbAlias);
		sqlServer.setDatabasePath(0, "database/tasks_database");
		sqlServer.setSilent(true);
		sqlServer.start();
		try {
			Class.forName("org.hsqldb.jdbc.JDBCDriver");
			if(isFirstRun()) {
				System.out.println("First run");
				firstRunSetup();
			}
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
	}
	
	//checks if the bot is being startup for the first time
	public boolean isFirstRun() {
		Connection sqlConn = null;
		PreparedStatement getSchemasStmt = null;
		boolean firstRun = true;
		
		try {
			sqlConn = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/"+dbAlias, "SA", "");
			getSchemasStmt = sqlConn.prepareStatement("SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'ToDoDisc' AND (TABLE_NAME = 'CATEGORIES' OR TABLE_NAME = 'TASKS')");
			ResultSet res = getSchemasStmt.executeQuery();
			if(res.next()) {
				if(res.next()) {
					firstRun = false;
				}
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DbUtils.closeQuietly(sqlConn);
			DbUtils.closeQuietly(getSchemasStmt);
		}
		return firstRun;
	}
	
	//creates schema and tables for first run
	public boolean firstRunSetup() {
		Connection sqlConn = null;
		PreparedStatement createSchema = null;
		PreparedStatement createCategoriesTable = null;
		PreparedStatement createTasksTable = null;
		boolean success = false;
		
		try {
			sqlConn = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/"+dbAlias, "SA", "");
			sqlConn.setAutoCommit(false);
			createSchema = sqlConn.prepareStatement("CREATE SCHEMA \"ToDoDisc\"");
			createCategoriesTable = sqlConn.prepareStatement("CREATE TABLE \"ToDoDisc\".CATEGORIES(\r\n"
					+ "id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, \r\n"
					+ "name CHAR(30) NOT NULL,\r\n"
					+ "description CHAR(200),\r\n"
					+ "guild_id CHAR(30) NOT NULL,\r\n"
					+ "main_channel CHAR(30) NOT NULL,\r\n"
					+ ")");
			createTasksTable = sqlConn.prepareStatement("CREATE TABLE \"ToDoDisc\".TASKS(\r\n"
					+ "id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\r\n"
					+ "name CHAR(30) NOT NULL,\r\n"
					+ "status INTEGER DEFAULT 0 NOT NULL,\r\n"
					+ "category_id INTEGER NOT NULL, \r\n"
					+ "author_name CHAR(30) DEFAULT '' NOT NULL,\r\n"
					+ "assigned_name CHAR(30),\r\n"
					+ "author_id CHAR(30) NOT NULL,\r\n"
					+ "assigned_id CHAR(30) DEFAULT '' NOT NULL, \r\n"
					+ "date CHAR(30) NOT NULL,\r\n"
					+ "time CHAR(30) NOT NULL,\r\n"
					+ "description CHAR(200) DEFAULT '' NOT NULL,\r\n"
					+ ")");
			createSchema.execute();
			createCategoriesTable.execute();
			createTasksTable.execute();
			
			sqlConn.commit();
			success = true;
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DbUtils.closeQuietly(sqlConn);
			DbUtils.closeQuietly(createSchema);
			DbUtils.closeQuietly(createCategoriesTable);
			DbUtils.closeQuietly(createTasksTable);
		}
		
		return success;
	}
	
	public boolean doesTaskCategoryExistName(String guildId, String name) {
		Connection sqlConn = null;
		boolean success = false;
		
		try {
			sqlConn = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/"+dbAlias, "SA", "");
			ResultSet res = sqlConn.prepareStatement("SELECT main_channel FROM \"ToDoDisc\".categories WHERE (guild_id = '" + guildId + "' AND name = '" + name + "')")
					.executeQuery();
			if(res.next()) {
				success = true;
			} 
		} catch (SQLException e) { 
			e.printStackTrace();
		} finally { 
			DbUtils.closeQuietly(sqlConn);
		}
		
		return success;
	}
	
	public boolean doesTaskCategoryExistId(String guildId, String id) {
		Connection sqlConn = null;
		boolean success = false;
		
		try {
			sqlConn = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/"+dbAlias, "SA", "");
			ResultSet res = sqlConn.prepareStatement("SELECT main_channel FROM \"ToDoDisc\".categories WHERE (guild_id = '" + guildId + "' AND main_channel = '" + id + "')")
					.executeQuery();
			if(res.next()) {
				success = true;
			} 
		} catch (SQLException e) { 
			e.printStackTrace();
		} finally { 
			DbUtils.closeQuietly(sqlConn);
		}
		
		return success;
	}
	
	
	public boolean newTaskCategory(String guildId, String categoryName,  String description, String tasksId) {
		Connection sqlConn = null;
		PreparedStatement insertTaskCat = null;
		boolean success = false;
		
		try {
			sqlConn = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/"+dbAlias, "SA", "");
			insertTaskCat = sqlConn.prepareStatement("INSERT INTO \"ToDoDisc\".CATEGORIES(name, description, guild_id, main_channel) VALUES ("
					+ "'" + categoryName + "'," 
					+ "'" + description + "'," 
					+ "'" + guildId + "'," 
					+ "'" + tasksId + "')"
					);
			insertTaskCat.execute();
			success = true;
		} catch (SQLException e) { 
			e.printStackTrace();
		} finally { 
			DbUtils.closeQuietly(sqlConn);
			DbUtils.closeQuietly(insertTaskCat);
		}
		
		return success;
	}
	
	public boolean removeTaskCategory(String guildId, String channelId) {
		Connection sqlConn = null;
		PreparedStatement delTaskCatOverview = null;
		PreparedStatement delTasks = null;
		boolean success = false;
		
		try {
			sqlConn = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/"+dbAlias, "SA", "");
			int catId = getTaskCatIdFromChannel(guildId, channelId);
			delTasks = sqlConn.prepareStatement("DELETE FROM \"ToDoDisc\".tasks WHERE category_id = " + catId);
			delTasks.execute();
			delTaskCatOverview = sqlConn.prepareStatement("DELETE FROM \"ToDoDisc\".categories WHERE (guild_id = '"+guildId+"' AND main_channel='"+channelId+"')");
			delTaskCatOverview.executeUpdate();
			success = true;
		} catch (SQLException e) { 
			e.printStackTrace();
		} finally { 
			DbUtils.closeQuietly(sqlConn);
			DbUtils.closeQuietly(delTaskCatOverview);
		}
		
		return success;
	}
	
	public String getChannelIds(String guildId, String categoryName) {
		Connection sqlConn = null;
		String ids = "";
		
		try {
			sqlConn = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/"+dbAlias, "SA", "");
			ResultSet res = sqlConn.prepareStatement("SELECT main_channel FROM \"ToDoDisc\".categories WHERE (guild_id = '" + guildId + "' AND name = '" + categoryName + "')")
					.executeQuery();
			if(res.next()) {
				ids = res.getString(1);
			} else {
				ids = "";
			}
		} catch (SQLException e) { 
			e.printStackTrace();
		} finally { 
			DbUtils.closeQuietly(sqlConn);
		}
				
		return ids;
	}
	
	public boolean checkValidChannel(String guildId, String channelId) { 
		Connection sqlConn = null;
		boolean valid = false;
		
		try {
			sqlConn = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/"+dbAlias, "SA", "");
			ResultSet res = sqlConn.prepareStatement("SELECT * FROM \"ToDoDisc\".categories WHERE (guild_id = '" + guildId + "' AND main_channel = '" + channelId + "')")
					.executeQuery();
			if(res.next()) {
				valid = true;
			}
		} catch (SQLException e) { 
			e.printStackTrace();
		} finally { 
			DbUtils.closeQuietly(sqlConn);
		}
		
		return valid;
	}
	
	public boolean doesTaskExistByName(String guildId, String channelId, String name) {
		Connection sqlConn = null;
		boolean exist = false;
		
		try {
			sqlConn = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/"+dbAlias, "SA", "");
			ResultSet res = sqlConn.prepareStatement("SELECT * FROM "
					+ "\"ToDoDisc\".tasks AS tasks "
					+ "INNER JOIN "
					+ "\"ToDoDisc\".categories AS categories "
					+ "ON tasks.category_id = categories.id "
					+ "WHERE (guild_id = '"+guildId + "' AND tasks.name ='"+name+"' AND main_channel='"+channelId+"')")
					.executeQuery();
			if(res.next()) {
				exist = true;
			}
		} catch (SQLException e) { 
			e.printStackTrace();
		} finally { 
			DbUtils.closeQuietly(sqlConn);
		}
		return exist;
	}
	
	public boolean doesTaskExistById(String guildId, String channelId, String id) {
		Connection sqlConn = null;
		boolean exist = false;
		
		try {
			sqlConn = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/"+dbAlias, "SA", "");
			ResultSet res = sqlConn.prepareStatement("SELECT * FROM "
					+ "\"ToDoDisc\".tasks AS tasks "
					+ "INNER JOIN "
					+ "\"ToDoDisc\".categories AS categories "
					+ "ON tasks.category_id = categories.id "
					+ "WHERE (guild_id = '"+guildId + "' AND tasks.id ='"+id+"' AND main_channel='"+channelId+"')")
					.executeQuery();
			if(res.next()) {
				exist = true;
			}
		} catch (SQLException e) { 
			e.printStackTrace();
		} finally { 
			DbUtils.closeQuietly(sqlConn);
		}
		return exist;
	}
	
	public DiscTask createTask(String guildId, String channelId, String name, String description, String author, String authorId) { 
		Connection sqlConn = null;
		DiscTask task = null;
		String time = DateTimeUtility.getTimeSecond();
		
		try {
			sqlConn = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/"+dbAlias, "SA", "");
			int taskCatId = getTaskCatIdFromChannel(guildId, channelId);
			if(taskCatId >= 0) { 
				PreparedStatement insertTask = sqlConn.prepareStatement("INSERT INTO \"ToDoDisc\".TASKS(name, description, author_name, author_id, date, time, category_id) VALUES ("
						+"'"+name+"',"
						+"'"+description+"',"
						+"'"+author+"',"
						+"'"+authorId+"',"
						+"'"+LocalDate.now().toString()+"',"
						+"'"+time+"',"
						+taskCatId
						+")");
				insertTask.execute();
				task = getTaskByName(guildId, channelId, name);
			} else {
				return null;
			}
		} catch (SQLException e) { 
			e.printStackTrace();
		} finally { 
			DbUtils.closeQuietly(sqlConn);
		}
		
		return task;
	}
	
	public boolean deleteTaskById(String guildId, String channelId, String id) { 
		Connection sqlConn = null;
		boolean success = false;
		
		try {
			sqlConn = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/"+dbAlias, "SA", "");
			success = sqlConn.prepareStatement("DELETE FROM \"ToDoDisc\".tasks WHERE id = " + id)
					.execute();
		} catch (SQLException e) { 
			e.printStackTrace();
		} finally { 
			DbUtils.closeQuietly(sqlConn);
		}
		return success;
	}
	
	public boolean deleteTaskByName(String guildId, String channelId, String name) { 
		Connection sqlConn = null;
		boolean success = false;
		
		try {
			sqlConn = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/"+dbAlias, "SA", "");
			int catId = getTaskCatIdFromChannel(guildId, channelId);
			success = sqlConn.prepareStatement("DELETE FROM \"ToDoDisc\".tasks WHERE category_id = " + catId + "AND name='"+name+"'")
					.execute();
		} catch (SQLException e) { 
			e.printStackTrace();
		} finally { 
			DbUtils.closeQuietly(sqlConn);
		}
		return success;
	}
	
	public int getTaskCatIdFromChannel(String guildId, String channelId) {
		Connection sqlConn = null;
		int id = -1;
		
		try {
			sqlConn = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/"+dbAlias, "SA", "");
			ResultSet res = sqlConn.prepareStatement("SELECT id FROM \"ToDoDisc\".categories WHERE (guild_id = '" + guildId + "' AND main_channel = '" + channelId + "')")
					.executeQuery();
			if(res.next()) {
				id = res.getInt(1);
			}
		} catch (SQLException e) { 
			e.printStackTrace();
		} finally { 
			DbUtils.closeQuietly(sqlConn);
		}
		return id;
	}
	
	public List<DiscTask> getAllTasks(String guildId, String channelId) {
		List<DiscTask> tasks = new ArrayList<DiscTask>();
		Connection sqlConn = null;
		
		try {
			sqlConn = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/"+dbAlias, "SA", "");
			ResultSet res = sqlConn.prepareStatement("select \r\n"
					+ "ID, TASKS.NAME AS TASK_NAME, CATEGORIES.NAME AS CATEGORY_NAME, STATUS, AUTHOR_ID, ASSIGNED_ID, DATE, TIME, DESCRIPTION\r\n"
					+ "FROM\r\n"
					+ "\"ToDoDisc\".TASKS AS TASKS\r\n"
					+ "INNER JOIN\r\n"
					+ "\"ToDoDisc\".CATEGORIES AS CATEGORIES\r\n"
					+ "ON \r\n"
					+ "TASKS.CATEGORY_ID = CATEGORIES.ID \n"
					+ "WHERE \n"
					+ "CATEGORIES.GUILD_ID = '" + guildId +"' AND CATEGORIES.MAIN_CHANNEL = '"+channelId+"'")
					.executeQuery();
			while(res.next()) {
				DiscTask t = new DiscTask(res.getString(2).trim())
						.setId(res.getString(1).trim())
						.setCategory(res.getString(3).trim())
						.setStatus(res.getInt(4))
						.setAuthor(res.getString(5).trim())
						.setAssigned(res.getString(6).trim())
						.setDate(res.getString(7).trim())
						.setTime(res.getString(8).trim())
						.setDesc(res.getString(9).trim());
				tasks.add(t);
			}
		} catch (SQLException e) { 
			e.printStackTrace();
		} finally { 
			DbUtils.closeQuietly(sqlConn);
		}
		
		return tasks;
	}
	
	public List<DiscTask> getTasksByStatus(String guildId, String channelId, int status) {
		List<DiscTask> tasks = new ArrayList<DiscTask>();
		Connection sqlConn = null;
		
		try {
			sqlConn = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/"+dbAlias, "SA", "");
			ResultSet res = sqlConn.prepareStatement("select \r\n"
					+ "ID, TASKS.NAME AS TASK_NAME, CATEGORIES.NAME AS CATEGORY_NAME, STATUS, AUTHOR_ID, ASSIGNED_ID, DATE, TIME, DESCRIPTION\r\n"
					+ "FROM\r\n"
					+ "\"ToDoDisc\".TASKS AS TASKS\r\n"
					+ "INNER JOIN\r\n"
					+ "\"ToDoDisc\".CATEGORIES AS CATEGORIES\r\n"
					+ "ON \r\n"
					+ "TASKS.CATEGORY_ID = CATEGORIES.ID \n"
					+ "WHERE \n"
					+ "CATEGORIES.GUILD_ID = '" + guildId +"' AND CATEGORIES.MAIN_CHANNEL = '"+channelId+"' AND TASKS.STATUS = " + status)
					.executeQuery();
			while(res.next()) {
				DiscTask t = new DiscTask(res.getString(2).trim())
						.setId(res.getString(1).trim())
						.setCategory(res.getString(3).trim())
						.setStatus(res.getInt(4))
						.setAuthor(res.getString(5).trim())
						.setAssigned(res.getString(6).trim())
						.setDate(res.getString(7).trim())
						.setTime(res.getString(8).trim())
						.setDesc(res.getString(9).trim());
				tasks.add(t);
			}
		} catch (SQLException e) { 
			e.printStackTrace();
		} finally { 
			DbUtils.closeQuietly(sqlConn);
		}
		
		return tasks;
	}
	
	public DiscTask getTaskByName(String guildId, String channelId, String name) {
		DiscTask task = null;
		Connection sqlConn = null;
		
		try {
			sqlConn = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/"+dbAlias, "SA", "");
			ResultSet res = sqlConn.prepareStatement("select \r\n"
					+ "ID, TASKS.NAME AS TASK_NAME, CATEGORIES.NAME AS CATEGORY_NAME, STATUS, AUTHOR_ID, ASSIGNED_ID, DATE, TIME, DESCRIPTION\r\n"
					+ "FROM\r\n"
					+ "\"ToDoDisc\".TASKS AS TASKS\r\n"
					+ "INNER JOIN\r\n"
					+ "\"ToDoDisc\".CATEGORIES AS CATEGORIES\r\n"
					+ "ON \r\n"
					+ "TASKS.CATEGORY_ID = CATEGORIES.ID \n"
					+ "WHERE \n"
					+ "CATEGORIES.GUILD_ID = '" + guildId +"' AND CATEGORIES.MAIN_CHANNEL = '"+channelId+"' AND TASKS.NAME = '"+name+"'")
					.executeQuery();
			if(res.next()) {
				task = new DiscTask(res.getString(2).trim())
						.setId(res.getString(1).trim())
						.setCategory(res.getString(3).trim())
						.setStatus(res.getInt(4))
						.setAuthor(res.getString(5).trim())
						.setAssigned(res.getString(6).trim())
						.setDate(res.getString(7).trim())
						.setTime(res.getString(8).trim())
						.setDesc(res.getString(9).trim());
			}
		} catch (SQLException e) { 
			e.printStackTrace();
		} finally { 
			DbUtils.closeQuietly(sqlConn);
		}
		
		return task;
	}
	
	public DiscTask getTaskById(String guildId, String channelId, int id) {
		DiscTask task = null;
		Connection sqlConn = null;
		
		try {
			sqlConn = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/"+dbAlias, "SA", "");
			ResultSet res = sqlConn.prepareStatement("select \r\n"
					+ "ID, TASKS.NAME AS TASK_NAME, CATEGORIES.NAME AS CATEGORY_NAME, STATUS, AUTHOR_ID, ASSIGNED_ID, DATE, TIME, DESCRIPTION\r\n"
					+ "FROM\r\n"
					+ "\"ToDoDisc\".TASKS AS TASKS\r\n"
					+ "INNER JOIN\r\n"
					+ "\"ToDoDisc\".CATEGORIES AS CATEGORIES\r\n"
					+ "ON \r\n"
					+ "TASKS.CATEGORY_ID = CATEGORIES.ID \n"
					+ "WHERE \n"
					+ "CATEGORIES.GUILD_ID = '" + guildId +"' AND CATEGORIES.MAIN_CHANNEL = '"+channelId+"' AND ID = "+id+"")
					.executeQuery();
			if(res.next()) {
				task = new DiscTask(res.getString(2).trim())
						.setId(res.getString(1).trim())
						.setCategory(res.getString(3).trim())
						.setStatus(res.getInt(4))
						.setAuthor(res.getString(5).trim())
						.setAssigned(res.getString(6).trim())
						.setDate(res.getString(7).trim())
						.setTime(res.getString(8).trim())
						.setDesc(res.getString(9).trim());
			}
		} catch (SQLException e) { 
			e.printStackTrace();
		} finally { 
			DbUtils.closeQuietly(sqlConn);
		}
		
		return task;
	}
	
	public DiscTask updateTaskStatus(int id, String guildId, String channelId, int status) { 
		Connection sqlConn = null;
		
		try {
			int catId = getTaskCatIdFromChannel(guildId, channelId);
			
			sqlConn = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/"+dbAlias, "SA", "");
			sqlConn.prepareStatement("UPDATE \"ToDoDisc\".TASKS "
					+ "SET STATUS = " + status 
					+ " WHERE CATEGORY_ID = " + catId + " AND ID = " + id)
					.execute();
			
			return getTaskById(guildId, channelId, id);
		} catch (SQLException e) { 
			e.printStackTrace();
		} finally { 
			DbUtils.closeQuietly(sqlConn);
		}
		
		return null;
	}
	
	public DiscTask updateTaskStatus(String name, String guildId, String channelId, int status) { 
		Connection sqlConn = null;
		
		try {
			int catId = getTaskCatIdFromChannel(guildId, channelId);
			
			sqlConn = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/"+dbAlias, "SA", "");
			sqlConn.prepareStatement("UPDATE \"ToDoDisc\".TASKS "
					+ "SET STATUS = " + status 
					+ "WHERE CATEGORY_ID = " + catId + " AND NAME = " + name)
					.execute();
			return getTaskByName(guildId, channelId, name);
		} catch (SQLException e) { 
			e.printStackTrace();
		} finally { 
			DbUtils.closeQuietly(sqlConn);
		}
		
		return null;
	}
	
	public void close() {
		sqlServer.shutdown();
	}
	
	public boolean isConnected() { 
		try { 
			sqlServer.checkRunning(true);
			return true;
		} catch (Exception e) { 
			return false;
		}
	}
}
